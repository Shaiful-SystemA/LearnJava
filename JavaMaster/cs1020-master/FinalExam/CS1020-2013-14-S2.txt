CS1020-2013/14-S2
=================
1. C
2. D
3. C [S:1, 3, 5] [Q: 3, 4, 5]
4. A 2, 7, 9
5. C
6. B
7.

public boolean searchAndSwitch(E item){
	
	ListNode<E> curr = head;
	ListNode<E> prev = null;
	while(curr != null && !curr.getElement().equals(item)){
		prev= curr;
		curr = curr.getNext();
	}

	if( curr == null || curr.getNext() == null){
		return false;
	}

	prev.setNext(curr.getNext());
	curr.setNext(curr.getNext().getNext());
	prev.getNext().setNext(curr);

	return true;	
}

8.

public ArrayList<MyPolygon> triangulate(){
	
	// should contain three points for each MyPolygon (triangles)	
	ArrayList<MyPolygon> triangles;

	triangles = new ArrayList();

	// choose an origin point (assume first point in the vertices)
	// all subsq MyPolygon object should contain this point
	Point origin = vertices.get(0);

	// it's observe that the other two points to form triangle
	// are adjacent vertices, except origin

	// so we iterate through the vertices, excluding origin (i=0)
	// find the combination of all adjacent pairs
	for(int i=1; i<(vertices.size()-1); i++){ // need to exclude last point
		ArrayList<Point> triangle = new ArrayList<Points>();
		triangle.add(origin);
		triangle.add(vertices.get(i));
		triangle.add(vertices.get(i+1));

		triangles.add(triangle);

	}

	return triangles;
}

9.
solve by recursion O(n)

public static Integer removeMax(Stack<Integer> s, Integer currMax){
		if(s.isEmpty()){ 
			return currMax;	
		}else{
			Integer top = s.pop();
			Integer theCurrMax = removeMax(s, top > currMax? top: currMax);

			if(top != theCurrMax){
				s.push(top);
			}

			return theCurrMax;
		}
		
	}

10.
// for increasing unique integer -> sorted -> use binary search variant
// need leftPt, midPt, RightPt

public static int iSearch(int[] ints, int leftPt, int rightPt){
		int midPt = (leftPt + rightPt)/2;
		if(ints[midPt] == midPt){
			return midPt;
		}else if( leftPt > rightPt){
			return -1;
		}else if( ints[midPt] > midPt){
			return iSearch(ints, leftPt, midPt-1);
		}else{
			return iSearch(ints, midPt+1, rightPt);
		}

	}

11.

A)

0 pass		1, 3, 2, 4, 6, 5
1 pass		1, 2, 3, 4, 5, 6	5 comparison
2 pass		1, 2, 3, 4, 5, 6	4 comparison = 9

B)
0 pass		1, 3, 2, 4, 6, 5
1 pass		1, 3, 2, 4, 5, |6	5 comparison
2 pass		1, 3, 2, 4, |5, 6	4 comparison
3 pass		1, 3, 2, |4, 5, 6	3 comparison
4 pass		1, 2, |3, 4, 5, 6	2 comparison
5 pass		1, |2, 3, 4, 5, 6	1 comparison
6 pass		1, 2, 3, 4, 5, 6	0 comparison =15

C)
0 pass		1, 3, 2, 4, 6, 5
1 pass		1, 3| 2, 4, 6, 5	1 comparison
2 pass		1, 2, 3|, 4, 6, 5	2 comparison
3 pass		1, 2, 3, 4|, 6, 5	1 comparison
4 pass		1, 2, 3, 4, 6|, 5	1 comparison
5 pass		1, 2, 3, 4, 5, 6	2 comparison = 7 comparison


12.)

statement1: 	log n
statement2: 	n * nlog n = n^2 * logn
statement3: 	n * log n
statement4: 	log n * log n = (log n)^2

13.)
a
i) 17, 37, 24, 52, 26 or 37, 24, 17, 52, 26 or 37, 24, 52, 26, 17

ii) 37 at index 11 is accessed and probed, 52, 56 are probed, insertion at index 3

iii) probe 11 (occupied). use h2(key) = 8, probe index sequence: 11->12->1->2->3->4->5->6 (empty), insertion at index 6.
  
b

l = 0
a = 0
z = 3
y = 2
d = 3 
o = 3
g = 6

i)
seperate chaining:
=============
0 l, a
1
2 y
3 z, d, o
4
5
6 g
7
8
9
10

ii) quadratic probing:
=============
l	o	y	z	d		g	o
0	1	2	3	4	5	6	7	8	9	10

iii) 7/11, seperate chaining.

13.) FUCK THIS